# DISABLED WORKFLOW - Vercelに移行のため無効化
# このワークフローはVercelに移行するため、無効化されています
name: TaskVision CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Firebaseにデプロイおよび拡張機能のリリース'
        required: true
        default: false
        type: boolean

# リポジトリ全体のワークフローに対する権限を設定
permissions:
  contents: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      web-changed: ${{ steps.filter.outputs.web || github.event_name == 'workflow_dispatch' }}
      extension-changed: ${{ steps.filter.outputs.extension || github.event_name == 'workflow_dispatch' }}
      extension-version-changed: ${{ steps.check_extension_version.outputs.version_changed || github.event_name == 'workflow_dispatch' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # すべての履歴を取得

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            web:
              - 'web/**'
              - '.github/workflows/main.yml'
            extension:
              - 'chrome-extension/**'
              - '.github/workflows/main.yml'
            shared:
              - 'shared/**'
              - '.github/workflows/main.yml'

      - name: Check extension version change
        id: check_extension_version
        if: ${{ steps.filter.outputs.extension == 'true' || github.event_name == 'workflow_dispatch' }}
        run: |
          # workflow_dispatchの場合は常にtrueを設定
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Processing workflow_dispatch event - assuming version change"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # デバッグ情報: イベント名とフィルタ結果の確認
          echo "Current event: ${{ github.event_name }}"
          echo "Extension filter result: ${{ steps.filter.outputs.extension }}"

          # 現在のブランチまたはPRの変更を確認
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Processing as pull_request event"
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
            echo "PR BASE_SHA: $BASE_SHA"
            echo "PR HEAD_SHA: $HEAD_SHA"
          else
            echo "Processing as push or other event"
            # git rev-parseの実行前にgitリポジトリの状態を確認
            echo "Git status:"
            git status
            echo "Git log (last 2 commits):"
            git log -n 2 --oneline
            
            BASE_SHA=$(git rev-parse HEAD~1)
            if [ $? -ne 0 ]; then
              echo "Error executing git rev-parse HEAD~1, checking commit count"
              COMMIT_COUNT=$(git rev-list --count HEAD)
              echo "Repository has $COMMIT_COUNT commits"
              if [ "$COMMIT_COUNT" -eq 1 ]; then
                echo "Repository has only one commit, using HEAD as both BASE_SHA and HEAD_SHA"
                BASE_SHA=$(git rev-parse HEAD)
              else
                echo "Error: Failed to determine BASE_SHA"
                exit 1
              fi
            fi
            
            HEAD_SHA=$(git rev-parse HEAD)
            echo "PUSH BASE_SHA: $BASE_SHA"
            echo "PUSH HEAD_SHA: $HEAD_SHA"
          fi

          # package.jsonファイルの存在確認
          if [ -f "chrome-extension/package.json" ]; then
            echo "chrome-extension/package.json exists"
          else
            echo "Warning: chrome-extension/package.json does not exist"
            echo "Current directory contents:"
            ls -la
            echo "Chrome extension directory contents:"
            ls -la chrome-extension || echo "chrome-extension directory not found"
          fi

          # package.jsonのバージョン変更を確認
          echo "Running git diff command to check version changes"
          DIFF_OUTPUT=$(git diff $BASE_SHA $HEAD_SHA -- chrome-extension/package.json || echo "git diff command failed")
          echo "Diff output length: $(echo "$DIFF_OUTPUT" | wc -l) lines"
          echo "Searching for version changes in diff..."

          CHANGED=$(echo "$DIFF_OUTPUT" | grep '"version"' || true)
          echo "CHANGED value: '$CHANGED'"

          if [[ ! -z "$CHANGED" ]]; then
            echo "Extension version changed in package.json"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "GITHUB_OUTPUT content after adding version_changed:"
            cat $GITHUB_OUTPUT || echo "Failed to read $GITHUB_OUTPUT"
          else
            echo "Extension version not changed in package.json"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "GITHUB_OUTPUT content after adding version_changed:"
            cat $GITHUB_OUTPUT || echo "Failed to read $GITHUB_OUTPUT"
          fi

  # Web部分のビルドとデプロイ
  build-web:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: cd web && npm install

      - name: Build web app
        run: |
          cd web
          npm run build
        env:
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Deploy to App Hosting
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.deploy == 'true' }}
        run: |
          cd web
          npm install -g firebase-tools
          firebase use ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}
          firebase deploy --only apphosting --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Upload web build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: web/.next
          retention-days: 7

  # 拡張機能のビルドは変更なし
  build-extension:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.extension-version-changed == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: chrome-extension/package-lock.json

      - name: Get version
        id: get_version
        run: |
          VERSION=$(node -p "require('./chrome-extension/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install dependencies
        run: cd web && npm install

      - name: Build shared package
        run: cd shared && npm run build

      - name: Build and Package
        run: |
          cd chrome-extension
          CI=true npm run package
          ls -la # ファイルの存在を確認

      - name: Upload CRX/ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-package
          path: |
            chrome-extension/taskvision-chrome-extension.crx
            chrome-extension/taskvision-chrome-extension.zip
          retention-days: 7

      - name: Upload Unpacked Extension
        uses: actions/upload-artifact@v4
        with:
          name: chrome-extension-unpacked
          path: chrome-extension/dist
          retention-days: 7

      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}
          name: TaskVision Extension v${{ steps.get_version.outputs.version }}
          artifacts: 'chrome-extension/taskvision-chrome-extension.crx,chrome-extension/taskvision-chrome-extension.zip'
          body: |
            TaskVision Chrome拡張機能の最新ビルドです。

            ## インストール方法

            1. このリリースからCRXファイルをダウンロードします
            2. Chromeで chrome://extensions を開きます
            3. CRXファイルをブラウザウィンドウにドラッグ＆ドロップします

            または開発者モードでインストールする場合は、unpacked版を使用してください。
          token: ${{ secrets.GITHUB_TOKEN }}
          replacesArtifacts: true
